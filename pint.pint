
(def to-list
  (fn (string)

    (def to-list^
      (fn (pos rec)
        ((fn (c) (if (= c '') () (cons c (rec (+ pos 1) rec))))
         (substr string pos 1))))

    (to-list^ 0 to-list^)))

(def whitespace ' 	
')

(def nil (cons))
(def nil? (fn (w) (if w nil '')))
(def not  (fn (c) (if c nil '')))

(def empty? (fn (l) (nil? (tail l))))

(def reduce
  (fn (f i l)
    (def reduce^
      (fn (res ll rec)
        (if (empty? ll)
          res
          (f (rec res (tail ll) rec) (head ll)))))

    (reduce^ i l reduce^)))

(def filter
  (fn (p l)
    (reduce 
      (fn (res i)
        (if (p i) (cons i res) res))
      ()
      l)))

(def map
  (fn (t l)
    (reduce
      (fn (res i)
        (cons (t i) res))
      ()
      l)))

(def in-list
  (fn (e l)
    (not (empty? (filter (fn (i) (= i e)) l)))))   

(def in-str
  (fn (c string) (in-list c (to-list string))))

(def is-whitespace
  (fn (x) (in-str x whitespace)))

(def t-ws
  (fn (x) (if (is-whitespace x) '_' x)))

(print (map t-ws (to-list INPUT)))
