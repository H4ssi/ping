; very hacky: searches for '(''i''n''c''l''u''d''e'' ' and then for next ')'
; the stuff in between is regarded to be a filename and its content inserted
; be careful not to create a match accidentially!!!

(def max-len (* 1024 (* 1024 1024)))

(def nil (head ()))
(def c-nil (c-call strstr * * '' * '?'))

(def prln (fn (x) (c-call puts int * x)))

(def slurp-fp (fn (fp)
 (def s (c-array char max-len))
 (def read-bytes (c-call fread int * s int 1 int max-len * fp))
 (c-set char (c-array-addr char read-bytes s) 0)
 (c-str s)))

(def slurp (fn (filename)
 ; todo checks
 (def fp (c-call fopen * * filename * 'r'))
 (def content (slurp-fp fp))
 (c-call fclose int * fp)
 content))

(def transform (fn (source)
 (def file-name (fn (match)
  (def end-of-form (c-call strstr * * match *
    ; ( to not confuse editors
    ')'))

  (def prev (c-get char (c-array-addr char 0 end-of-form)))
  (c-set char (c-array-addr char 0 end-of-form) 0)
  (def copy (c-call strdup * * match))
  (c-set char (c-array-addr char 0 end-of-form) prev)

  (def tok1 (c-call strtok * * copy * ' '))
  (def tok2 (c-call strtok * * nil * ' '))

  (c-call strcpy * * copy * tok2)
  (c-call strcat * * copy * '.pint')))

 (def include-file (fn (parent match)
  (def inner (slurp (file-name match)))

  (def len-p (c-call strlen uint * parent))
  (def len-i (c-call strlen uint * inner))

  (def len (+ len-p len-i)) ; a little bit overkill, because [include ...] gets replaced

  (def target (c-array char len))

  (def prev (c-get char (c-array-addr char 0 match)))
  (c-set char (c-array-addr char 0 match) 0)
  (c-call strcpy * * target * parent)
  (c-call strcat * * target * inner)
  (c-set char (c-array-addr char 0 match) prev)

  (def rest (c-call strstr * * match *
    ; ( to not confuse editors
    ')'))

  (c-set char (c-array-addr char 0 rest) 10)

  (c-call strcat * * target * rest)))

 (def pattern-c-str (c-array char 10))
 (c-set char (c-array-addr char 0 pattern-c-str) 0)
 (c-call strcat * * pattern-c-str *
   '('
    ; ) to not confuse editors
 )
 (c-call strcat * * pattern-c-str * 'include ')
 (def pattern (c-str pattern-c-str))

 (def t^ (fn (source rec)
  (def match (c-call strstr * * source * pattern))

  (if (p/ident c-nil match)
   source
   (rec (include-file source match) rec))))

 (t^ source t^)))

(def filename (slurp-fp (c-get * (c-array-addr * 0 (c-val-ref stdin)))))
(prln (transform (slurp filename)))

