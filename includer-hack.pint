
(def max-len (* 1024 (* 1024 1024)))

(def nil (head ()))
(def c-nil (c-call strstr * * '' * '?'))

(def prln (fn (x) (c-call puts int * x)))

(def slurp-fp (fn (fp)
 (def s (c-call malloc * int max-len))
 (def read-bytes (c-call fread int * s int 1 int max-len * fp))
 (c-array-set char read-bytes s 0)
 (c-str s)))

(def slurp (fn (filename)
 ; todo checks
 (def fp (c-call fopen * * filename * 'r'))
 (def content (slurp-fp fp))
 (c-call fclose int * fp)
 content))

(def transform (fn (source)
 (def file-name (fn (match)
  ; ( to not confuse vim :>
  (def end-of-form (c-call strstr * * match * ')'))

  (def prev (c-array-get char 0 end-of-form))
  (c-array-set char 0 end-of-form 0)
  (def copy (c-call strdup * * match))
  (c-array-set char 0 end-of-form prev)

  (def tok1 (c-call strtok * * copy * ' '))
  (def tok2 (c-call strtok * * nil * ' '))

  (c-call strcpy * * copy * tok2)
  (c-call strcat * * copy * '.pint')))

 (def include-file (fn (parent match)
  (def inner (slurp (file-name match)))

  (def len-p (c-call strlen uint * parent))
  (def len-i (c-call strlen uint * inner))

  (def len (+ len-p len-i)) ; a little bit overkill, because (include ...) gets replaced

  (def target (c-call malloc * uint len))

  (def prev (c-array-get char 0 match))
  (c-array-set char 0 match 0)
  (c-call strcpy * * target * parent)
  (c-call strcat * * target * inner)
  (c-array-set char 0 match prev)

  ; ( to not confuse vim :>
  (def rest (c-call strstr * * match * ')'))

  (c-array-set char 0 rest 10)

  (c-call strcat * * target * rest)))

 (def t^ (fn (source rec)
  (def match (c-call strstr * * source * '(include ')) ;)

  (if (p/ident c-nil match)
   source
   (rec (include-file source match) rec))))

 (t^ source t^)))

(def filename (slurp-fp (c-array-get * 0 (c-val-ref stdin))))
(prln (transform (slurp filename)))

