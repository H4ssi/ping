
(include io)
(include std)

(def c-ptr-array
 (fn (ptr-list)
  (def l (list-length ptr-list))
  (def array (c-array * l))
  (map
   (fn (p) (unpair p (fn (i ptr)
    (c-set * (c-array-addr * i array) ptr))))
   (zip (range l) ptr-list))
  array))

(def ref-build (fn ()  (c-array * 1)))
(def ref-ref   (fn (r) r))
(def ref-deref (fn (r) (c-get * r)))

(def pr (fn (x) (print (str (cons x ())))))
(def prln (fn (x) (print (str (cons x (cons '
' ()))))))

(def c (c-call LLVMGetGlobalContext *))
(def m (c-call LLVMModuleCreateWithNameInContext * * '' * c))
(def i (c-call LLVMInt32TypeInContext * * c))
(def ps (c-ptr-array (cons i (cons i ()))))
(def ft (c-call LLVMFunctionType * * i * ps int 2 int 0))
(def ps-none (c-ptr-array ()))
(def ft-noargs (c-call LLVMFunctionType * * i * ps-none int 0 int 0))
(def f (c-call LLVMAddFunction * * m * 'plus' * ft))
(def bb (c-call LLVMAppendBasicBlockInContext * * c * f * 'entry'))
(def b (c-call LLVMCreateBuilder *))
(c-call LLVMPositionBuilderAtEnd void * b * bb)
(def r (c-call LLVMBuildNSWAdd * * b * (c-call LLVMGetParam * * f int 0) * (c-call LLVMGetParam * * f int 1) * ''))
(c-call LLVMBuildRet * * b * r)

(def LLVMAbortProcessAction 0)
(def LLVMPrintMessageAction 1)
(def LLVMReturnStatusAction 2)

(if (= 0 (c-call LLVMVerifyFunction int * f int LLVMPrintMessageAction))
    nil
    (prln 'error verifying function'))

(def err (ref-build))

(if (= 0 (c-call LLVMVerifyModule int * m int LLVMPrintMessageAction * (ref-ref err)))
    nil
    (prln (c-str (ref-deref err))))

(c-call LLVMLinkInMCJIT void)
(c-call ExternLLVMInitializeNativeTarget void) ; todo inlining does not work :/
(c-call ExternLLVMInitializeNativeAsmPrinter void)

(def glbl (c-call LLVMAddGlobal * * m * i * 'global'))
(c-call LLVMSetInitializer void * glbl * (c-call LLVMConstNull * * i))

(def fs (c-call LLVMAddFunction * * m * 'setter' * ft-noargs))
(def bb (c-call LLVMAppendBasicBlockInContext * * c * fs * 'entry'))
(c-call LLVMPositionBuilderAtEnd void * b * bb)
(def r (c-call LLVMBuildStore * * b * (c-call LLVMConstInt * * i int 1 int 0) * glbl))
(c-call LLVMBuildRet * * b * (c-call LLVMConstNull * * i))

(def ee (ref-build))

(if (= 0 (c-call LLVMCreateJITCompilerForModule int * (ref-ref ee) * m int 0 * (ref-ref err)))
    nil
    (prln (c-str (ref-deref err))))

(c-call LLVMDumpModule void * m)

(def plus (c-call LLVMGetPointerToGlobal * * (ref-deref ee) * fs))

(prln (str (cons 'calling ' (cons fs ()))))

(prln (str (cons 'setter = ' (cons (c-call * plus int) ()))))

(def m (c-call LLVMModuleCreateWithNameInContext * * '' * c))
(def glbl (c-call LLVMAddGlobal * * m * i * 'global'))

(def fg (c-call LLVMAddFunction * * m * 'getter' * ft-noargs))
(def bb (c-call LLVMAppendBasicBlockInContext * * c * fg * 'entry'))
(c-call LLVMPositionBuilderAtEnd void * b * bb)
(def r (c-call LLVMBuildLoad * * b * glbl * 'loaded'))
(c-call LLVMBuildRet * * b * r)

(c-call LLVMAddModule void * (ref-deref ee) * m)

(c-call LLVMDumpModule void * m)

(def plus (c-call LLVMGetPointerToGlobal * * (ref-deref ee) * fg))

(prln (str (cons 'calling ' (cons fg ()))))

(prln (str (cons 'getter = ' (cons (c-call * plus int) ()))))

(c-call LLVMDisposeBuilder void * b)
